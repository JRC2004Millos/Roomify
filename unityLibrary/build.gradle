apply plugin: 'com.android.library'
apply from: '../shared/keepUnitySymbols.gradle'

ext {
    // Ruta al NDK embebido de Unity (ajústala si tu Editor está en otra carpeta)
    UNITY_NDK_PATH = "C:/Program Files/Unity/Hub/Editor/6000.1.7f1/Editor/Data/PlaybackEngines/AndroidPlayer/NDK".replace('\\','/')
}

// Para que Gradle encuentre los .aar exportados por Unity
repositories {
    flatDir { dirs 'libs' }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation(name: 'arcore_client', ext:'aar')
    implementation(name: 'ARPresto', ext:'aar')
    implementation(name: 'UnityARCore', ext:'aar')
    implementation(name: 'unityandroidpermissions', ext:'aar')
    //implementation project(':unityLibrary:xrmanifest.androidlib')
}

android {
    namespace "com.unity3d.player"

    // Alineado con tu app
    compileSdk 35

    // ¡NO usar ndkVersion ni ndkPath aquí! (eso fuerza a buscar el NDK del SDK)
    // ndkVersion "27.2.12479018"  // <-- quitar
    // ndkPath "..."               // <-- quitar

    defaultConfig {
        minSdk 26
        targetSdk 35
        versionCode 1
        versionName "1.0.0"

        ndk {
            abiFilters "arm64-v8a"
            debugSymbolLevel "none"
        }

        consumerProguardFiles "proguard-unity.txt"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    lint { abortOnError false }

    androidResources {
        ignoreAssetsPattern = "!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~"
        noCompress = ['.unity3d', '.ress', '.resource', '.obb', '.bundle', '.unityexp']
    }

    packaging {
        jniLibs { useLegacyPackaging true }
        // pickFirsts += ['lib/**/libc++_shared.so'] // opcional
    }
}

def getSdkDir() {
    Properties local = new Properties()
    local.load(new FileInputStream("${rootDir}/local.properties"))
    return local.getProperty('sdk.dir')
}

def GetIl2CppOutputPath(String workingDir, String abi) {
    return "${workingDir}/src/main/jniLibs/${abi}/libil2cpp.so";
}

def GetIl2CppSymbolPath(String workingDir, String abi) {
    return "${workingDir}/symbols/${abi}/libil2cpp.so";
}

// ---- IMPORTANTE: usar el NDK de Unity (UNITY_NDK) ----
def BuildIl2CppImpl(String workingDir, String configuration, String architecture, String abi, String[] staticLibraries) {
    def commandLineArgs = []
    commandLineArgs.add("--compile-cpp")
    commandLineArgs.add("--platform=Android")
    commandLineArgs.add("--architecture=${architecture}")
    commandLineArgs.add("--outputpath=${workingDir}/src/main/jniLibs/${abi}/libil2cpp.so")
    commandLineArgs.add("--baselib-directory=${workingDir}/src/main/jniStaticLibs/${abi}")
    commandLineArgs.add("--configuration=${configuration}")
    commandLineArgs.add("--dotnetprofile=unityaot-linux")
    commandLineArgs.add("--usymtool-path=${workingDir}/src/main/Il2CppOutputProject/usymtool.exe")
    commandLineArgs.add("--profiler-report")
    commandLineArgs.add("--profiler-output-file=${workingDir}/build/il2cpp_${abi}_${configuration}/il2cpp_conv.traceevents")
    commandLineArgs.add("--print-command-line")
    commandLineArgs.add("--static-lib-il2-cpp")
    commandLineArgs.add("--data-folder=${workingDir}/src/main/Il2CppOutputProject/Source/il2cppOutput/data")
    commandLineArgs.add("--generatedcppdir=${workingDir}/src/main/Il2CppOutputProject/Source/il2cppOutput")
    commandLineArgs.add("--cachedirectory=${workingDir}/build/il2cpp_${abi}_${configuration}/il2cpp_cache")
    // << Aquí el cambio clave: no usamos android.ndkDirectory >>
    commandLineArgs.add("--tool-chain-path=" + project.ext.UNITY_NDK_PATH)

    staticLibraries.eachWithIndex { fileName, i ->
        commandLineArgs.add("--additional-libraries=${workingDir}/src/main/jniStaticLibs/${abi}/${fileName}")
    }

    def executableExtension = ""
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        executableExtension = ".exe"
        commandLineArgs = commandLineArgs*.replace('\"', '\\\"')
    }
    exec {
        executable "${workingDir}/src/main/Il2CppOutputProject/IL2CPP/build/deploy/il2cpp${executableExtension}"
        args commandLineArgs
        environment "ANDROID_SDK_ROOT", getSdkDir()
    }

    def dbgLevel = project.android.defaultConfig.ndk.debugSymbolLevel
    def usePublicSymbols = dbgLevel == null || !dbgLevel.toString().toLowerCase().equals("full")
    def extensionToRemove = usePublicSymbols ? ".dbg.so" : ".sym.so"
    def extensionToKeep = usePublicSymbols ? ".sym.so" : ".dbg.so"

    delete "${workingDir}/src/main/jniLibs/${abi}/libil2cpp${extensionToRemove}"
    ant.move(file: "${workingDir}/src/main/jniLibs/${abi}/libil2cpp${extensionToKeep}", tofile: "${workingDir}/symbols/${abi}/libil2cpp.so")
}

android {
    tasks.register('buildIl2Cpp') {
        def workingDir = projectDir.toString().replaceAll('\\\\', '/')
        def archs = ['arm64':'arm64-v8a']
        def staticLibs = ['arm64':[]]
        inputs.files fileTree(dir: 'src/main/Il2CppOutputProject', include: ['**/*'])
        inputs.files fileTree(dir: 'src/main/jniStaticLibs', include: ['**/*'])
        archs.each { arch, abi ->
            outputs.file GetIl2CppOutputPath(workingDir, abi)
            outputs.file GetIl2CppSymbolPath(workingDir, abi)
        }
        doLast {
            archs.each { arch, abi ->
                BuildIl2CppImpl(workingDir, 'Release', arch, abi, staticLibs[arch] as String[])
            }
        }
    }

    afterEvaluate {
        tasks.findByName('mergeDebugJniLibFolders')?.dependsOn buildIl2Cpp
        tasks.findByName('mergeReleaseJniLibFolders')?.dependsOn buildIl2Cpp
    }

    sourceSets { main { jni.srcDirs = ["src/main/Il2CppOutputProject"] } }
}
